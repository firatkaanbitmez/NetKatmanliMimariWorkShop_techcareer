

***İkinci Ders Giriş

Versiyon Kontrol Sistemi
    Versiyon kontrol sistemleri döküman üzerinde yaptığımız değişiklileri adım adım kaydeden ve isterseniz bunu internet üzeriden depoad(repo) saklamamızı ve yönetmemizi sağlayan bir sistemdir. Git, SVN, BitKeeper, Mercurial sürüm kontrol sistemlerine örnek olarak gösterilir.

Git => açık kaynak kodlu bir versiyon sürüm kontrol sistemidir.

Neden Git Kullanılıyor? =>> Geliştirme süreçlerini izlemek, Projede yapılan değişikliklerin nerede ve ne zaman yapıldığını izlemek, Yanlış veya hatalı işlem yapıldığında daha önceki çalışan sürüme dönmek için

Git Kullanırken Commitlere ÖNEM VER. Her İşlemden Sonra Commit ET!

GİT CONFİG ÖNEMLİ DEĞİL BENİM GİT NOTLARIMDA YOK DİYE YAZDIM ! 

    .gitignore >> Proje ilk oluşturulduğunda gitignore'u dahil etmek daha iyi olur.



git init
git add .
git commit -m "first commit"
git branch -M master
git remote add origin https://github.com/firatkaanbitmez/NetKatmanliMimariWorkShop_techcareer.git
git push origin master --force



Solid Prensipleri
Şirket SonarQube kullanıyor. Kodunuzu test ederek solid prensiplerine uygun olmayan yerleri gösteriyor.

SOLID Prensipleri
S =>> Single Responsibilty Prensibi bir method bir işi yapsın
O =>> Open Closed Kodunuz değiştirmeye açık değil ama geliştirmeye açık
L =>> Liskov substitution Kodlarımızda herhangi bir değişiklik yapmaya gerek duymadan alt sınıfları üst sınıfların yerine kullanabilmeliyiz.
I =>> Interface segregation Sorumlulukların hepsini tek bir arayüze toplamak yerine daha özelleştirilmiş birden fazla arayüz oluşturmalıyız.
D =>> Dependency Inversion  Sınıflar arası bağımlılıklar olabildiğince az olmalıdır 



https://learn.microsoft.com/tr-tr/dotnet/csharp/linq/get-started/introduction-to-linq-queries

https://medium.com

https://github.com/KardelRuveyda/dotnet-techcareer-workshop

